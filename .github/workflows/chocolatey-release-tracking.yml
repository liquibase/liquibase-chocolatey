name: Chocolatey Release Tracking

on:
  schedule:
    # Run every midnight UTC
    # This will check for the latest version of the package on Chocolatey
    - cron: '0 0 * * *'
  workflow_run:
    workflows: ["Choco Build and Deploy"]
    types:
      - completed
  workflow_dispatch:

permissions:
  issues: write
  contents: read

jobs:
  check-chocolatey-availability:
    runs-on: ubuntu-latest
    # Only run if the deploy workflow succeeded (when triggered by workflow_run) or always run for schedule/manual triggers
    if: ${{ github.event_name == 'schedule' || github.event_name == 'workflow_dispatch' || github.event.workflow_run.conclusion == 'success' }}
    outputs:
      is_available: ${{ steps.check-availability.outputs.is_available }}
      version: ${{ steps.check-availability.outputs.version }}
      status_message: ${{ steps.check-availability.outputs.status_message }}
      status_color: ${{ steps.check-availability.outputs.status_color }}
    steps:
      - name: Get version from deploy workflow
        id: get-version
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            let version;
            
            if (context.eventName === 'workflow_run') {
              // Get the workflow run that triggered this
              const triggeringRun = await github.rest.actions.getWorkflowRun({
                owner: context.repo.owner,
                repo: context.repo.repo,
                run_id: context.payload.workflow_run.id
              });
              
              // Get the inputs from the triggering workflow
              const inputs = triggeringRun.data.inputs || {};
              version = inputs.version;
              
              if (!version) {
                core.setFailed('Could not extract version from triggering workflow');
                return;
              }
              
              console.log(`Extracted version from workflow_run: ${version}`);
            } else {
              // For scheduled runs or manual dispatch, get the latest version from Chocolatey
              try {
                const response = await fetch('https://community.chocolatey.org/api/v2/Packages?$filter=Id%20eq%20%27liquibase%27&$orderby=Version%20desc&$top=1&$format=json');
                const data = await response.json();
                
                if (data.d && data.d.results && data.d.results.length > 0) {
                  version = data.d.results[0].Version;
                  console.log(`Found latest Liquibase Chocolatey version: ${version}`);
                } else {
                  // Fallback: get latest Liquibase GitHub release
                  const release = await github.rest.repos.getLatestRelease({
                    owner: 'liquibase',
                    repo: 'liquibase'
                  });
                  version = release.data.tag_name.replace(/^v/, ''); // Remove 'v' prefix if present
                  console.log(`Using latest Liquibase GitHub release version: ${version}`);
                }
              } catch (error) {
                console.error(`Error getting latest version: ${error.message}`);
                core.setFailed('Could not determine version to check');
                return;
              }
            }
            
            console.log(`Final version to check: ${version}`);
            core.setOutput('version', version);

      - name: Check Chocolatey availability
        id: check-availability
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const version = '${{ steps.get-version.outputs.version }}';
            
            try {
              // Check if the package page exists and get content
              const response = await fetch(`https://community.chocolatey.org/packages/liquibase/${version}`);
              
              let statusMessage;
              let statusColor;
              let isAvailable = false;
              
              if (response.ok) {
                // Get the page content to check for wait status
                const pageContent = await response.text();
                
                // Check for indicators that package is in wait/processing status
                const isInWaitStatus = pageContent.includes('Package is currently in waiting') || 
                                     pageContent.includes('Package waiting for processing') ||
                                     pageContent.includes('waiting for moderator approval') ||
                                     pageContent.includes('Package scan results') ||
                                     pageContent.includes('Status: Processing') ||
                                     pageContent.includes('Status: Waiting');
                
                if (isInWaitStatus) {
                  statusMessage = `⏳ Liquibase v${version} is waiting for approval/processing on Chocolatey.\nPackage is submitted but pending moderator review.\nPackage URL: https://community.chocolatey.org/packages/liquibase/${version}`;
                  statusColor = 'warning';
                  console.log(`⏳ Version ${version} is in wait status on Chocolatey`);
                  isAvailable = false;
                } else {
                  // Package page exists and appears to be fully available
                  statusMessage = `✅ Liquibase v${version} is now available on Chocolatey!\nInstall with: \`choco install liquibase --version ${version}\`\nPackage URL: https://community.chocolatey.org/packages/liquibase/${version}`;
                  statusColor = 'good';
                  console.log(`✅ Version ${version} is available on Chocolatey`);
                  isAvailable = true;
                }
              } else {
                statusMessage = `❌ Liquibase v${version} package page not found on Chocolatey.\nResponse status: ${response.status} ${response.statusText}`;
                statusColor = 'danger';
                console.log(`❌ Version ${version} package page not found (${response.status})`);
                isAvailable = false;
              }
              
              core.setOutput('is_available', isAvailable.toString());
              core.setOutput('version', version);
              core.setOutput('status_message', statusMessage);
              core.setOutput('status_color', statusColor);
              
            } catch (error) {
              console.error(`Error checking Chocolatey for version ${version}: ${error.message}`);
              core.setOutput('is_available', 'false');
              core.setOutput('version', version);
              core.setOutput('status_message', `❌ Error checking Chocolatey availability for v${version}: ${error.message}`);
              core.setOutput('status_color', 'danger');
            }

  notify:
    needs: check-chocolatey-availability
    runs-on: ubuntu-latest
    steps:
      - name: Check if notification should be sent
        id: should-notify
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const version = '${{ needs.check-chocolatey-availability.outputs.version }}';
            const isAvailable = '${{ needs.check-chocolatey-availability.outputs.is_available }}';
            const statusColor = '${{ needs.check-chocolatey-availability.outputs.status_color }}';
            const eventName = context.eventName;
            
            // Always notify for workflow_run (immediate post-deployment)
            if (eventName === 'workflow_run') {
              console.log('Notifying for workflow_run trigger');
              core.setOutput('should_notify', 'true');
              return;
            }
            
            // For scheduled runs, check if we've already notified about success
            if (eventName === 'schedule' && isAvailable === 'true') {
              // Check recent workflow runs to see if we've already notified about this version being available
              const runs = await github.rest.actions.listWorkflowRuns({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: 'chocolatey-release-tracking.yml',
                per_page: 10,
                status: 'completed'
              });
              
              // Look for previous successful runs that notified about this version
              for (const run of runs.data.workflow_runs) {
                if (run.id === context.runId) continue; // Skip current run
                
                // Check if this run was for the same version and was successful
                const jobs = await github.rest.actions.listJobsForWorkflowRun({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  run_id: run.id
                });
                
                // Look for successful completion of this version
                const hasSuccessfulNotification = jobs.data.jobs.some(job => 
                  job.name === 'notify' && 
                  job.conclusion === 'success' &&
                  job.steps.some(step => 
                    step.name === 'Send Slack Notification' && 
                    step.conclusion === 'success'
                  )
                );
                
                if (hasSuccessfulNotification) {
                  console.log(`Already notified about version ${version} being available in run ${run.id}`);
                  core.setOutput('should_notify', 'false');
                  return;
                }
              }
            }
            
            // Notify for these conditions:
            // 1. Package is waiting/processing (warning status)
            // 2. Package is now available (good status) - first time
            // 3. Package not found or error (danger status)
            if (statusColor === 'warning' || statusColor === 'good' || statusColor === 'danger') {
              console.log(`Sending notification for status: ${statusColor}`);
              core.setOutput('should_notify', 'true');
            } else {
              console.log('No notification needed');
              core.setOutput('should_notify', 'false');
            }

      - name: Send Slack Notification
        if: steps.should-notify.outputs.should_notify == 'true'
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_COLOR: ${{ needs.check-chocolatey-availability.outputs.status_color }}
          SLACK_MESSAGE: ${{ needs.check-chocolatey-availability.outputs.status_message }}
          SLACK_TITLE: "Chocolatey Package Status Check"
          SLACK_USERNAME: liquibot
          SLACK_WEBHOOK: ${{ secrets.LIQUIBASE_PACKAGE_DEPLOY_STATUS_WEBHOOK }}
          SLACK_ICON_EMOJI: ":robot_face:"
          SLACK_FOOTER: "${{ github.repository }}"
          SLACK_LINK_NAMES: true
