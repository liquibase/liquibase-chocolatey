name: Chocolatey Release Tracking

on:
  schedule:
    # Run every midnight UTC
    # This will check for the latest version of the package on Chocolatey
    - cron: '0 0 * * *'
  workflow_run:
    workflows: ["Choco Build and Deploy"]
    types:
      - completed
  workflow_dispatch:

permissions:
  issues: write
  contents: read

jobs:
  check-chocolatey-availability:
    runs-on: ubuntu-latest
    # Only run if the deploy workflow succeeded
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    outputs:
      is_available: ${{ steps.check-availability.outputs.is_available }}
      version: ${{ steps.check-availability.outputs.version }}
      status_message: ${{ steps.check-availability.outputs.status_message }}
      status_color: ${{ steps.check-availability.outputs.status_color }}
    steps:
      - name: Get version from deploy workflow
        id: get-version
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Get the workflow run that triggered this
            const triggeringRun = await github.rest.actions.getWorkflowRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.payload.workflow_run.id
            });
            
            // Get the inputs from the triggering workflow
            const inputs = triggeringRun.data.inputs || {};
            const version = inputs.version;
            
            if (!version) {
              core.setFailed('Could not extract version from triggering workflow');
              return;
            }
            
            console.log(`Extracted version: ${version}`);
            core.setOutput('version', version);

      - name: Check Chocolatey availability
        id: check-availability
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const version = '${{ steps.get-version.outputs.version }}';
            
            try {
              // Check if the package page exists and get content
              const response = await fetch(`https://community.chocolatey.org/packages/liquibase/${version}`);
              
              let statusMessage;
              let statusColor;
              let isAvailable = false;
              
              if (response.ok) {
                // Get the page content to check for wait status
                const pageContent = await response.text();
                
                // Check for indicators that package is in wait/processing status
                const isInWaitStatus = pageContent.includes('Package is currently in waiting') || 
                                     pageContent.includes('Package waiting for processing') ||
                                     pageContent.includes('waiting for moderator approval') ||
                                     pageContent.includes('Package scan results') ||
                                     pageContent.includes('Status: Processing') ||
                                     pageContent.includes('Status: Waiting');
                
                if (isInWaitStatus) {
                  statusMessage = `⏳ Liquibase v${version} is waiting for approval/processing on Chocolatey.\nPackage is submitted but pending moderator review.\nPackage URL: https://community.chocolatey.org/packages/liquibase/${version}`;
                  statusColor = 'warning';
                  console.log(`⏳ Version ${version} is in wait status on Chocolatey`);
                  isAvailable = false;
                } else {
                  // Package page exists and appears to be fully available
                  statusMessage = `✅ Liquibase v${version} is now available on Chocolatey!\nInstall with: \`choco install liquibase --version ${version}\`\nPackage URL: https://community.chocolatey.org/packages/liquibase/${version}`;
                  statusColor = 'good';
                  console.log(`✅ Version ${version} is available on Chocolatey`);
                  isAvailable = true;
                }
              } else {
                statusMessage = `❌ Liquibase v${version} package page not found on Chocolatey.\nResponse status: ${response.status} ${response.statusText}`;
                statusColor = 'danger';
                console.log(`❌ Version ${version} package page not found (${response.status})`);
                isAvailable = false;
              }
              
              core.setOutput('is_available', isAvailable.toString());
              core.setOutput('version', version);
              core.setOutput('status_message', statusMessage);
              core.setOutput('status_color', statusColor);
              
            } catch (error) {
              console.error(`Error checking Chocolatey for version ${version}: ${error.message}`);
              core.setOutput('is_available', 'false');
              core.setOutput('version', version);
              core.setOutput('status_message', `❌ Error checking Chocolatey availability for v${version}: ${error.message}`);
              core.setOutput('status_color', 'danger');
            }

  notify:
    needs: check-chocolatey-availability
    runs-on: ubuntu-latest
    steps:
      - name: Send Slack Notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_COLOR: ${{ needs.check-chocolatey-availability.outputs.status_color }}
          SLACK_MESSAGE: ${{ needs.check-chocolatey-availability.outputs.status_message }}
          SLACK_TITLE: "Chocolatey Package Status Check"
          SLACK_USERNAME: liquibot
          SLACK_WEBHOOK: ${{ secrets.NIGHTLY_BUILDS_SLACK_WEBHOOK }}
          SLACK_ICON_EMOJI: ":robot_face:"
          SLACK_FOOTER: "${{ github.repository }}"
          SLACK_LINK_NAMES: true
